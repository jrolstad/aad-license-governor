// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AzureAdLicenseGovernor.Worker.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProductChangesAreMonitoredFeature : object, Xunit.IClassFixture<ProductChangesAreMonitoredFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ProductChangesMonitoring.feature"
#line hidden
        
        public ProductChangesAreMonitoredFeature(ProductChangesAreMonitoredFeature.FixtureData fixtureData, AzureAdLicenseGovernor_Worker_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Product Changes are Monitored", "Given a tenant is configured to monitor product usage\r\nThen the product usage is " +
                    "logged", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
testRunner.Given("the Azure Active Directory Tenant \'tenant-one\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "SkuId",
                        "SkuPartNumber"});
            table25.AddRow(new string[] {
                        "c5928f49-12ba-48f7-ada3-0d743a3601d5",
                        "VISIOCLIENT"});
            table25.AddRow(new string[] {
                        "09015f9f-377f-4538-bbb5-f75ceb09358a",
                        "PROJECTPREMIUM"});
#line 9
testRunner.And("licensed products in \'tenant-one\'", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServicePlanId",
                        "ServicePlanName"});
            table26.AddRow(new string[] {
                        "da792a53-cbc0-4184-a10d-e544dd34b3c1",
                        "ONEDRIVE_BASIC"});
            table26.AddRow(new string[] {
                        "2bdbaf8f-738f-4ac7-9234-3c3ee2ce7d0f",
                        "VISIOONLINE"});
            table26.AddRow(new string[] {
                        "113feb6c-3fe4-4440-bddc-54d774bf0318",
                        "EXCHANGE_S_FOUNDATION"});
            table26.AddRow(new string[] {
                        "663a804f-1c30-4ff0-9915-9db84f0d1cea",
                        "VISIO_CLIENT_SUBSCRIPTION"});
#line 13
testRunner.And("service plans in \'tenant-one\' for product \'VISIOCLIENT\'", ((string)(null)), table26, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant Does Not Tracks Changes")]
        [Xunit.TraitAttribute("FeatureTitle", "Product Changes are Monitored")]
        [Xunit.TraitAttribute("Description", "Tenant Does Not Tracks Changes")]
        public virtual void TenantDoesNotTracksChanges()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant Does Not Tracks Changes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 21
testRunner.Given("the Tenant \'tenant-one\' is configured to not track product changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
testRunner.And("products are previously monitored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
testRunner.When("products are monitored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
testRunner.Then("there is not a \'Product Monitoring|Change Summary\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
testRunner.And("there is not a \'Product Monitoring|Change Summary:None\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant Tracks Changes - No Changes Found")]
        [Xunit.TraitAttribute("FeatureTitle", "Product Changes are Monitored")]
        [Xunit.TraitAttribute("Description", "Tenant Tracks Changes - No Changes Found")]
        public virtual void TenantTracksChanges_NoChangesFound()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant Tracks Changes - No Changes Found", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 28
testRunner.Given("the Tenant \'tenant-one\' is configured to track product changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "SkuId",
                            "SkuPartNumber"});
                table27.AddRow(new string[] {
                            "c5928f49-12ba-48f7-ada3-0d743a3601d5",
                            "VISIOCLIENT"});
                table27.AddRow(new string[] {
                            "09015f9f-377f-4538-bbb5-f75ceb09358a",
                            "PROJECTPREMIUM"});
#line 29
testRunner.And("the snapshot for licensed products in \'tenant-one\' has products", ((string)(null)), table27, "And ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "ServicePlanId",
                            "ServicePlanName"});
                table28.AddRow(new string[] {
                            "da792a53-cbc0-4184-a10d-e544dd34b3c1",
                            "ONEDRIVE_BASIC"});
                table28.AddRow(new string[] {
                            "2bdbaf8f-738f-4ac7-9234-3c3ee2ce7d0f",
                            "VISIOONLINE"});
                table28.AddRow(new string[] {
                            "113feb6c-3fe4-4440-bddc-54d774bf0318",
                            "EXCHANGE_S_FOUNDATION"});
                table28.AddRow(new string[] {
                            "663a804f-1c30-4ff0-9915-9db84f0d1cea",
                            "VISIO_CLIENT_SUBSCRIPTION"});
#line 33
testRunner.And("the snapshot for product \'VISIOCLIENT\' in \'tenant-one\' has service plans", ((string)(null)), table28, "And ");
#line hidden
#line 39
testRunner.When("products are monitored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table29.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table29.AddRow(new string[] {
                            "Added",
                            "0"});
                table29.AddRow(new string[] {
                            "Removed",
                            "0"});
                table29.AddRow(new string[] {
                            "Updated",
                            "0"});
#line 40
testRunner.Then("there is a \'Product Monitoring|Change Summary:None\' message logged with data", ((string)(null)), table29, "Then ");
#line hidden
#line 46
testRunner.And("there is not a \'Product Monitoring|New Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
testRunner.And("there is not a \'Product Monitoring|Removed Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
testRunner.And("there is not a \'Product Monitoring|Updated Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant Tracks Changes - Products Added")]
        [Xunit.TraitAttribute("FeatureTitle", "Product Changes are Monitored")]
        [Xunit.TraitAttribute("Description", "Tenant Tracks Changes - Products Added")]
        public virtual void TenantTracksChanges_ProductsAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant Tracks Changes - Products Added", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 51
testRunner.Given("the Tenant \'tenant-one\' is configured to track product changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "SkuId",
                            "SkuPartNumber"});
                table30.AddRow(new string[] {
                            "c5928f49-12ba-48f7-ada3-0d743a3601d5",
                            "VISIOCLIENT"});
#line 52
testRunner.And("the snapshot for licensed products in \'tenant-one\' has products", ((string)(null)), table30, "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "ServicePlanId",
                            "ServicePlanName"});
                table31.AddRow(new string[] {
                            "da792a53-cbc0-4184-a10d-e544dd34b3c1",
                            "ONEDRIVE_BASIC"});
                table31.AddRow(new string[] {
                            "2bdbaf8f-738f-4ac7-9234-3c3ee2ce7d0f",
                            "VISIOONLINE"});
                table31.AddRow(new string[] {
                            "113feb6c-3fe4-4440-bddc-54d774bf0318",
                            "EXCHANGE_S_FOUNDATION"});
                table31.AddRow(new string[] {
                            "663a804f-1c30-4ff0-9915-9db84f0d1cea",
                            "VISIO_CLIENT_SUBSCRIPTION"});
#line 55
testRunner.And("the snapshot for product \'VISIOCLIENT\' in \'tenant-one\' has service plans", ((string)(null)), table31, "And ");
#line hidden
#line 61
testRunner.When("products are monitored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table32.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table32.AddRow(new string[] {
                            "Added",
                            "1"});
                table32.AddRow(new string[] {
                            "Removed",
                            "0"});
                table32.AddRow(new string[] {
                            "Updated",
                            "0"});
#line 62
testRunner.Then("there is a \'Product Monitoring|Change Summary\' message logged with data", ((string)(null)), table32, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table33.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table33.AddRow(new string[] {
                            "ProductId",
                            "09015f9f-377f-4538-bbb5-f75ceb09358a"});
                table33.AddRow(new string[] {
                            "ProductName",
                            "PROJECTPREMIUM"});
#line 68
testRunner.And("there is a \'Product Monitoring|New Product\' message logged with data", ((string)(null)), table33, "And ");
#line hidden
#line 73
testRunner.And("there is not a \'Product Monitoring|Removed Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
testRunner.And("there is not a \'Product Monitoring|Updated Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant Tracks Changes - Products Removed")]
        [Xunit.TraitAttribute("FeatureTitle", "Product Changes are Monitored")]
        [Xunit.TraitAttribute("Description", "Tenant Tracks Changes - Products Removed")]
        public virtual void TenantTracksChanges_ProductsRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant Tracks Changes - Products Removed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 77
testRunner.Given("the Tenant \'tenant-one\' is configured to track product changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "SkuId",
                            "SkuPartNumber"});
                table34.AddRow(new string[] {
                            "c5928f49-12ba-48f7-ada3-0d743a3601d5",
                            "VISIOCLIENT"});
                table34.AddRow(new string[] {
                            "09015f9f-377f-4538-bbb5-f75ceb09358a",
                            "PROJECTPREMIUM"});
                table34.AddRow(new string[] {
                            "d4cc2f49-c31e-4613-b8fc-a4c5d46da8e2",
                            "DYNAMICS"});
#line 78
testRunner.And("the snapshot for licensed products in \'tenant-one\' has products", ((string)(null)), table34, "And ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "ServicePlanId",
                            "ServicePlanName"});
                table35.AddRow(new string[] {
                            "da792a53-cbc0-4184-a10d-e544dd34b3c1",
                            "ONEDRIVE_BASIC"});
                table35.AddRow(new string[] {
                            "2bdbaf8f-738f-4ac7-9234-3c3ee2ce7d0f",
                            "VISIOONLINE"});
                table35.AddRow(new string[] {
                            "113feb6c-3fe4-4440-bddc-54d774bf0318",
                            "EXCHANGE_S_FOUNDATION"});
                table35.AddRow(new string[] {
                            "663a804f-1c30-4ff0-9915-9db84f0d1cea",
                            "VISIO_CLIENT_SUBSCRIPTION"});
#line 83
testRunner.And("the snapshot for product \'VISIOCLIENT\' in \'tenant-one\' has service plans", ((string)(null)), table35, "And ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "ServicePlanId",
                            "ServicePlanName"});
                table36.AddRow(new string[] {
                            "113feb6c-3fe4-4440-bddc-54d774bf0318",
                            "EXCHANGE_S_FOUNDATION"});
#line 89
testRunner.And("the snapshot for product \'DYNAMICS\' in \'tenant-one\' has service plans", ((string)(null)), table36, "And ");
#line hidden
#line 92
testRunner.When("products are monitored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table37.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table37.AddRow(new string[] {
                            "Added",
                            "0"});
                table37.AddRow(new string[] {
                            "Removed",
                            "1"});
                table37.AddRow(new string[] {
                            "Updated",
                            "0"});
#line 93
testRunner.Then("there is a \'Product Monitoring|Change Summary\' message logged with data", ((string)(null)), table37, "Then ");
#line hidden
#line 99
testRunner.And("there is not a \'Product Monitoring|New Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table38.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table38.AddRow(new string[] {
                            "ProductId",
                            "d4cc2f49-c31e-4613-b8fc-a4c5d46da8e2"});
                table38.AddRow(new string[] {
                            "ProductName",
                            "DYNAMICS"});
#line 100
testRunner.And("there is a \'Product Monitoring|Removed Product\' message logged with data", ((string)(null)), table38, "And ");
#line hidden
#line 105
testRunner.And("there is not a \'Product Monitoring|Updated Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
testRunner.And("there is not a \'Product Monitoring|New Service Plan\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
testRunner.And("there is not a \'Product Monitoring|Removed Service Plan\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant Tracks Changes - Service Plans Removed")]
        [Xunit.TraitAttribute("FeatureTitle", "Product Changes are Monitored")]
        [Xunit.TraitAttribute("Description", "Tenant Tracks Changes - Service Plans Removed")]
        public virtual void TenantTracksChanges_ServicePlansRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant Tracks Changes - Service Plans Removed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 110
testRunner.Given("the Tenant \'tenant-one\' is configured to track product changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "SkuId",
                            "SkuPartNumber"});
                table39.AddRow(new string[] {
                            "c5928f49-12ba-48f7-ada3-0d743a3601d5",
                            "VISIOCLIENT"});
                table39.AddRow(new string[] {
                            "09015f9f-377f-4538-bbb5-f75ceb09358a",
                            "PROJECTPREMIUM"});
#line 111
testRunner.And("the snapshot for licensed products in \'tenant-one\' has products", ((string)(null)), table39, "And ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "ServicePlanId",
                            "ServicePlanName"});
                table40.AddRow(new string[] {
                            "da792a53-cbc0-4184-a10d-e544dd34b3c1",
                            "ONEDRIVE_BASIC"});
                table40.AddRow(new string[] {
                            "2bdbaf8f-738f-4ac7-9234-3c3ee2ce7d0f",
                            "VISIOONLINE"});
                table40.AddRow(new string[] {
                            "113feb6c-3fe4-4440-bddc-54d774bf0318",
                            "EXCHANGE_S_FOUNDATION"});
                table40.AddRow(new string[] {
                            "663a804f-1c30-4ff0-9915-9db84f0d1cea",
                            "VISIO_CLIENT_SUBSCRIPTION"});
                table40.AddRow(new string[] {
                            "7edc25a2-bbb7-443e-9221-14704e7e45ac",
                            "SOMETHING_ELSE"});
#line 115
testRunner.And("the snapshot for product \'VISIOCLIENT\' in \'tenant-one\' has service plans", ((string)(null)), table40, "And ");
#line hidden
#line 122
testRunner.When("products are monitored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table41.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table41.AddRow(new string[] {
                            "Added",
                            "0"});
                table41.AddRow(new string[] {
                            "Removed",
                            "0"});
                table41.AddRow(new string[] {
                            "Updated",
                            "1"});
#line 123
testRunner.Then("there is a \'Product Monitoring|Change Summary\' message logged with data", ((string)(null)), table41, "Then ");
#line hidden
#line 129
testRunner.And("there is not a \'Product Monitoring|New Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
testRunner.And("there is not a \'Product Monitoring|Removed Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table42.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table42.AddRow(new string[] {
                            "ProductId",
                            "c5928f49-12ba-48f7-ada3-0d743a3601d5"});
                table42.AddRow(new string[] {
                            "ProductName",
                            "VISIOCLIENT"});
#line 131
testRunner.And("there is a \'Product Monitoring|Updated Product\' message logged with data", ((string)(null)), table42, "And ");
#line hidden
#line 136
testRunner.And("there is not a \'Product Monitoring|New Service Plan\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table43.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table43.AddRow(new string[] {
                            "ProductId",
                            "c5928f49-12ba-48f7-ada3-0d743a3601d5"});
                table43.AddRow(new string[] {
                            "ProductName",
                            "VISIOCLIENT"});
                table43.AddRow(new string[] {
                            "ServicePlanId",
                            "7edc25a2-bbb7-443e-9221-14704e7e45ac"});
                table43.AddRow(new string[] {
                            "ServicePlanName",
                            "SOMETHING_ELSE"});
#line 137
testRunner.And("there is a \'Product Monitoring|Removed Service Plan\' message logged with data", ((string)(null)), table43, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant Tracks Changes - Service Plans Added")]
        [Xunit.TraitAttribute("FeatureTitle", "Product Changes are Monitored")]
        [Xunit.TraitAttribute("Description", "Tenant Tracks Changes - Service Plans Added")]
        public virtual void TenantTracksChanges_ServicePlansAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant Tracks Changes - Service Plans Added", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 145
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 146
testRunner.Given("the Tenant \'tenant-one\' is configured to track product changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "SkuId",
                            "SkuPartNumber"});
                table44.AddRow(new string[] {
                            "c5928f49-12ba-48f7-ada3-0d743a3601d5",
                            "VISIOCLIENT"});
                table44.AddRow(new string[] {
                            "09015f9f-377f-4538-bbb5-f75ceb09358a",
                            "PROJECTPREMIUM"});
#line 147
testRunner.And("the snapshot for licensed products in \'tenant-one\' has products", ((string)(null)), table44, "And ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "ServicePlanId",
                            "ServicePlanName"});
                table45.AddRow(new string[] {
                            "da792a53-cbc0-4184-a10d-e544dd34b3c1",
                            "ONEDRIVE_BASIC"});
                table45.AddRow(new string[] {
                            "2bdbaf8f-738f-4ac7-9234-3c3ee2ce7d0f",
                            "VISIOONLINE"});
                table45.AddRow(new string[] {
                            "113feb6c-3fe4-4440-bddc-54d774bf0318",
                            "EXCHANGE_S_FOUNDATION"});
#line 151
testRunner.And("the snapshot for product \'VISIOCLIENT\' in \'tenant-one\' has service plans", ((string)(null)), table45, "And ");
#line hidden
#line 156
testRunner.When("products are monitored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table46.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table46.AddRow(new string[] {
                            "Added",
                            "0"});
                table46.AddRow(new string[] {
                            "Removed",
                            "0"});
                table46.AddRow(new string[] {
                            "Updated",
                            "1"});
#line 157
testRunner.Then("there is a \'Product Monitoring|Change Summary\' message logged with data", ((string)(null)), table46, "Then ");
#line hidden
#line 163
testRunner.And("there is not a \'Product Monitoring|New Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
testRunner.And("there is not a \'Product Monitoring|Removed Product\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table47.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table47.AddRow(new string[] {
                            "ProductId",
                            "c5928f49-12ba-48f7-ada3-0d743a3601d5"});
                table47.AddRow(new string[] {
                            "ProductName",
                            "VISIOCLIENT"});
#line 165
testRunner.And("there is a \'Product Monitoring|Updated Product\' message logged with data", ((string)(null)), table47, "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table48.AddRow(new string[] {
                            "TenantId",
                            "{tenant-one}"});
                table48.AddRow(new string[] {
                            "ProductId",
                            "c5928f49-12ba-48f7-ada3-0d743a3601d5"});
                table48.AddRow(new string[] {
                            "ProductName",
                            "VISIOCLIENT"});
                table48.AddRow(new string[] {
                            "ServicePlanId",
                            "663a804f-1c30-4ff0-9915-9db84f0d1cea"});
                table48.AddRow(new string[] {
                            "ServicePlanName",
                            "VISIO_CLIENT_SUBSCRIPTION"});
#line 170
testRunner.And("there is a \'Product Monitoring|New Service Plan\' message logged with data", ((string)(null)), table48, "And ");
#line hidden
#line 177
testRunner.And("there is not a \'Product Monitoring|Removed Service Plan\' message logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProductChangesAreMonitoredFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProductChangesAreMonitoredFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
