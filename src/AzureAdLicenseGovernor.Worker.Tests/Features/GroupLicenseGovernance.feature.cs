// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AzureAdLicenseGovernor.Worker.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GroupLicenseGovernanceFeature : object, Xunit.IClassFixture<GroupLicenseGovernanceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GroupLicenseGovernance.feature"
#line hidden
        
        public GroupLicenseGovernanceFeature(GroupLicenseGovernanceFeature.FixtureData fixtureData, AzureAdLicenseGovernor_Worker_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Group License Governance", "When a group has assigned licenses defined \r\nthen it is only assigned in AAD to t" +
                    "he products and service plans defined", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
testRunner.Given("the Azure Active Directory Tenant \'tenant-one\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SkuId",
                        "SkuPartNumber"});
            table4.AddRow(new string[] {
                        "c5928f49-12ba-48f7-ada3-0d743a3601d5",
                        "VISIOCLIENT"});
            table4.AddRow(new string[] {
                        "09015f9f-377f-4538-bbb5-f75ceb09358a",
                        "PROJECTPREMIUM"});
#line 9
testRunner.And("licensed products in \'tenant-one\'", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServicePlanId",
                        "ServicePlanName"});
            table5.AddRow(new string[] {
                        "da792a53-cbc0-4184-a10d-e544dd34b3c1",
                        "ONEDRIVE_BASIC"});
            table5.AddRow(new string[] {
                        "2bdbaf8f-738f-4ac7-9234-3c3ee2ce7d0f",
                        "VISIOONLINE"});
            table5.AddRow(new string[] {
                        "113feb6c-3fe4-4440-bddc-54d774bf0318",
                        "EXCHANGE_S_FOUNDATION"});
            table5.AddRow(new string[] {
                        "663a804f-1c30-4ff0-9915-9db84f0d1cea",
                        "VISIO_CLIENT_SUBSCRIPTION"});
#line 13
testRunner.And("service plans in \'tenant-one\' for product \'VISIOCLIENT\'", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServicePlanId",
                        "ServicePlanName"});
            table6.AddRow(new string[] {
                        "818523f5-016b-4355-9be8-ed6944946ea7",
                        "PROJECT_PROFESSIONAL"});
            table6.AddRow(new string[] {
                        "fa200448-008c-4acb-abd4-ea106ed2199d",
                        "FLOW_FOR_PROJECT"});
            table6.AddRow(new string[] {
                        "50554c47-71d9-49fd-bc54-42a2765c555c",
                        "DYN365_CDS_PROJECT"});
            table6.AddRow(new string[] {
                        "113feb6c-3fe4-4440-bddc-54d774bf0318",
                        "EXCHANGE_S_FOUNDATION"});
            table6.AddRow(new string[] {
                        "e95bec33-7c88-4a70-8e19-b10bd9d0c014",
                        "SHAREPOINTWAC"});
            table6.AddRow(new string[] {
                        "fe71d6c3-a2ea-4499-9778-da042bf08063",
                        "SHAREPOINT_PROJECT"});
            table6.AddRow(new string[] {
                        "5dbe027f-2339-4123-9542-606e4d348a72",
                        "SHAREPOINTENTERPRISE"});
            table6.AddRow(new string[] {
                        "fafd7243-e5c1-4a3a-9e40-495efcb1d3c3",
                        "PROJECT_CLIENT_SUBSCRIPTION"});
#line 19
testRunner.And("service plans in \'tenant-one\' for product \'PROJECTPREMIUM\'", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "DisplayName"});
            table7.AddRow(new string[] {
                        "group-1"});
            table7.AddRow(new string[] {
                        "group-2"});
            table7.AddRow(new string[] {
                        "group-3"});
#line 30
testRunner.And("groups in tenant \'tenant-one\'", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Enabled Features"});
            table8.AddRow(new string[] {
                        "PROJECTPREMIUM",
                        "PROJECT_PROFESSIONAL,FLOW_FOR_PROJECT,EXCHANGE_S_FOUNDATION"});
#line 36
testRunner.Given("license configuration in \'Enforce\' mode for group \'group-1\' in tenant \'tenant-one" +
                    "\'", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Enabled Features"});
            table9.AddRow(new string[] {
                        "VISIOCLIENT",
                        "ONEDRIVE_BASIC,VISIOONLINE,EXCHANGE_S_FOUNDATION,VISIO_CLIENT_SUBSCRIPTION"});
#line 39
testRunner.And("license configuration in \'Enforce\' mode for group \'group-2\' in tenant \'tenant-one" +
                    "\'", ((string)(null)), table9, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="New Assignments Are Added to the Group")]
        [Xunit.TraitAttribute("FeatureTitle", "Group License Governance")]
        [Xunit.TraitAttribute("Description", "New Assignments Are Added to the Group")]
        public virtual void NewAssignmentsAreAddedToTheGroup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New Assignments Are Added to the Group", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 44
 testRunner.Given("the group \'group-1\' in tenant \'tenant-one\' has no license assignments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.Given("the group \'group-2\' in tenant \'tenant-one\' has no license assignments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
 testRunner.When("the license configuration is applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table10.AddRow(new string[] {
                            "PROJECTPREMIUM",
                            "DYN365_CDS_PROJECT,SHAREPOINTWAC,SHAREPOINT_PROJECT,SHAREPOINTENTERPRISE,PROJECT_" +
                                "CLIENT_SUBSCRIPTION"});
#line 47
 testRunner.Then("the group \'group-1\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table10, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table11.AddRow(new string[] {
                            "VISIOCLIENT",
                            ""});
#line 50
 testRunner.And("the group \'group-2\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table11, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Existing Assignments Who Match Do Nothing")]
        [Xunit.TraitAttribute("FeatureTitle", "Group License Governance")]
        [Xunit.TraitAttribute("Description", "Existing Assignments Who Match Do Nothing")]
        public virtual void ExistingAssignmentsWhoMatchDoNothing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Existing Assignments Who Match Do Nothing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table12.AddRow(new string[] {
                            "PROJECTPREMIUM",
                            "DYN365_CDS_PROJECT,SHAREPOINTWAC,SHAREPOINT_PROJECT,SHAREPOINTENTERPRISE,PROJECT_" +
                                "CLIENT_SUBSCRIPTION"});
#line 55
 testRunner.Given("the group \'group-1\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table13.AddRow(new string[] {
                            "VISIOCLIENT",
                            ""});
#line 58
 testRunner.And("the group \'group-2\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table13, "And ");
#line hidden
#line 61
 testRunner.When("the license configuration is applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table14.AddRow(new string[] {
                            "PROJECTPREMIUM",
                            "DYN365_CDS_PROJECT,SHAREPOINTWAC,SHAREPOINT_PROJECT,SHAREPOINTENTERPRISE,PROJECT_" +
                                "CLIENT_SUBSCRIPTION"});
#line 62
 testRunner.Then("the group \'group-1\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table14, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table15.AddRow(new string[] {
                            "VISIOCLIENT",
                            ""});
#line 65
 testRunner.And("the group \'group-2\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table15, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Existing Assignments Not Matching Configured Remove Service Plans")]
        [Xunit.TraitAttribute("FeatureTitle", "Group License Governance")]
        [Xunit.TraitAttribute("Description", "Existing Assignments Not Matching Configured Remove Service Plans")]
        public virtual void ExistingAssignmentsNotMatchingConfiguredRemoveServicePlans()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Existing Assignments Not Matching Configured Remove Service Plans", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table16.AddRow(new string[] {
                            "PROJECTPREMIUM",
                            "DYN365_CDS_PROJECT"});
#line 70
 testRunner.Given("the group \'group-1\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table17.AddRow(new string[] {
                            "VISIOCLIENT",
                            ""});
#line 73
 testRunner.And("the group \'group-2\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table17, "And ");
#line hidden
#line 76
 testRunner.When("the license configuration is applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table18.AddRow(new string[] {
                            "PROJECTPREMIUM",
                            "DYN365_CDS_PROJECT,SHAREPOINTWAC,SHAREPOINT_PROJECT,SHAREPOINTENTERPRISE,PROJECT_" +
                                "CLIENT_SUBSCRIPTION"});
#line 77
 testRunner.Then("the group \'group-1\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table18, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table19.AddRow(new string[] {
                            "VISIOCLIENT",
                            ""});
#line 80
 testRunner.And("the group \'group-2\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table19, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unrecognized Product does nothing")]
        [Xunit.TraitAttribute("FeatureTitle", "Group License Governance")]
        [Xunit.TraitAttribute("Description", "Unrecognized Product does nothing")]
        public virtual void UnrecognizedProductDoesNothing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unrecognized Product does nothing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Enabled Features"});
                table20.AddRow(new string[] {
                            "OTHER",
                            "PROJECT_PROFESSIONAL,FLOW_FOR_PROJECT,EXCHANGE_S_FOUNDATION"});
#line 85
 testRunner.Given("license configuration in \'Enforce\' mode for group \'group-1\' in tenant \'tenant-one" +
                        "\'", ((string)(null)), table20, "Given ");
#line hidden
#line 88
 testRunner.When("the license configuration is applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
 testRunner.Then("the group \'group-1\' in tenant \'tenant-one\' has no license assignments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unrecognized Service Plan Is Not Disabled")]
        [Xunit.TraitAttribute("FeatureTitle", "Group License Governance")]
        [Xunit.TraitAttribute("Description", "Unrecognized Service Plan Is Not Disabled")]
        public virtual void UnrecognizedServicePlanIsNotDisabled()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unrecognized Service Plan Is Not Disabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Enabled Features"});
                table21.AddRow(new string[] {
                            "PROJECTPREMIUM",
                            "PROJECT_PROFESSIONAL,FLOW_FOR_PROJECT,EXCHANGE_S_FOUNDATION,OTHER"});
#line 92
 testRunner.Given("license configuration in \'Enforce\' mode for group \'group-1\' in tenant \'tenant-one" +
                        "\'", ((string)(null)), table21, "Given ");
#line hidden
#line 95
 testRunner.When("the license configuration is applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Disabled Features"});
                table22.AddRow(new string[] {
                            "PROJECTPREMIUM",
                            "DYN365_CDS_PROJECT,SHAREPOINTWAC,SHAREPOINT_PROJECT,SHAREPOINTENTERPRISE,PROJECT_" +
                                "CLIENT_SUBSCRIPTION"});
#line 96
 testRunner.Then("the group \'group-1\' in tenant \'tenant-one\' has license assignments", ((string)(null)), table22, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GroupLicenseGovernanceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GroupLicenseGovernanceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
